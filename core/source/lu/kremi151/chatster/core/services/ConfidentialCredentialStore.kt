/**
 * Copyright 2020 Michel Kremer (kremi151)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lu.kremi151.chatster.core.services

import lu.kremi151.chatster.api.annotations.Inject
import lu.kremi151.chatster.api.service.ConfidentialStreamHandler
import lu.kremi151.chatster.api.service.CredentialStore
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.util.*

class ConfidentialCredentialStore(
        private val credentialFile: File
): CredentialStore {

    @Inject
    private lateinit var confidentialStreamHandler: ConfidentialStreamHandler

    private lateinit var credentials: Properties

    constructor(): this(File("credentials"))

    private fun loadCredentials() {
        credentials = Properties()
        if (!credentialFile.exists()) {
            return
        }
        confidentialStreamHandler.openStream(FileInputStream(credentialFile))
                .use { inputStream -> credentials.load(inputStream) }
    }

    private fun storeCredentials() {
        if (!::credentials.isInitialized) {
            return
        }
        confidentialStreamHandler.openStream(FileOutputStream(credentialFile))
                .use { outputStream -> credentials.store(outputStream, "Generated by ConfidentialCredentialStore from Chatster") }
    }

    @Synchronized
    override fun storeCredential(name: String, value: String) {
        if (!::credentials.isInitialized) {
            loadCredentials()
        }
        credentials.setProperty(name, value)
        storeCredentials()
    }

    @Synchronized
    override fun readCredential(name: String): String? {
        if (!::credentials.isInitialized) {
            loadCredentials()
        }
        return credentials.getProperty(name, null)
    }

}
